[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://b5v6juafhyi3f"]

[sub_resource type="Shader" id="Shader_5f8w7"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.rc's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec2 scrollSpeed;
uniform float visibilityYLimit : hint_range(0.0, 1.0);
varying float visibilityYLimitAlpha;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy + scrollSpeed * TIME;
	visibilityYLimitAlpha = 0.0;
	float y = (VERTEX.y+1.0) / 2.0;
	if(y < visibilityYLimit) {
		visibilityYLimitAlpha = 1.0;
		if(y > visibilityYLimit*0.5 && visibilityYLimit < 0.95) {
			VERTEX.y += 0.03*sin(10.0*abs(VERTEX.x)) + 0.0125f*sin(TIME);
		}
	}
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA = visibilityYLimitAlpha;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_nr3aw"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_bhegm"]
in_3d_space = true
generate_mipmaps = false
seamless = true
noise = SubResource("FastNoiseLite_nr3aw")

[resource]
render_priority = 0
shader = SubResource("Shader_5f8w7")
shader_parameter/albedo = Color(0, 0.501961, 0.501961, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/scrollSpeed = Vector2(0.05, 0)
shader_parameter/visibilityYLimit = 1.0
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_bhegm")
